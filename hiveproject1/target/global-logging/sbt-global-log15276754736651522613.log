[0m[[0m[0mdebug[0m] [0m[0m> Exec(collectAnalyses, None, Some(CommandSource(network-1)))[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Processing event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Compile / collectAnalyses[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: initialized: JsonRpcNotificationMessage(2.0, initialized, {})[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: bloop.integrations.sbt.Offloader$$anon$1@6acb45c1, check cycles: false, forcegc: true[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/18284/Desktop/Training%20Program/Week%204/hiveproject1/src/main/scala/example/GetUrlContent.scala","languageId":"scala","version":1,"text":"package example\n\nimport org.apache.http.HttpEntity\nimport org.apache.http.HttpResponse\nimport org.apache.http.client.ClientProtocolException\nimport org.apache.http.client.HttpClient\nimport org.apache.http.client.methods.HttpGet\nimport org.apache.http.impl.client.DefaultHttpClient\n\nobject GetUrlContent extends App {\n  simpleApi()\n  var data = getRestContent(\n    \"https://reqres.in/api/users\"\n  )\n println(data)\n\n data = getRestContent(\"https://gorest.co.in/public/v1/posts\")\n println(data) \n\n  def simpleApi(): Unit = {\n    val url = \"http://api.hostip.info/get_json.php?ip=12.215.42.19\"\n    val result = scala.io.Source.fromURL(url).mkString\n    println(result)\n  }\n\n  /** Returns the text content from a REST URL. Returns a blank String if there\n    * is a problem. (Probably should use Option/Some/None; I didn't know about\n    * it back then.)\n    */\n  def getRestContent(url: String): String = {\n    val httpClient = new DefaultHttpClient()\n    val httpResponse = httpClient.execute(new HttpGet(url))\n    val entity = httpResponse.getEntity()\n    var content = \"\"\n    if (entity != null) {\n      val inputStream = entity.getContent()\n      content = scala.io.Source.fromInputStream(inputStream).getLines.mkString\n      inputStream.close\n    }\n    httpClient.getConnectionManager().shutdown()\n    return content\n  }\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/18284/Desktop/Training%20Program/Week%204/hiveproject1/src/main/scala/example/LoginScreen.scala","languageId":"scala","version":1,"text":"package example\n\nimport scala.io.Source\n\nobject LoginScreen {\n    var administrator = \"Admin\"\n    var adminPass = \"boss\"\n    var user1 = \"Matthew\"\n    var user1Pass = \"enter\"\n    var failedAttempts = 0\n    var currentUser = \"\"\n\n    def options{\n        var optionSeq: List[String] = List(\"1: Stock Application\", \"2: User Options\", \"3: Exit Application\")\n        println(\"Please select an option\")\n        \n        for(x <- optionSeq){\n            println(x)\n        }\n\n        var selection = scala.io.StdIn.readInt\n\n        selection match{\n            case 1 => println(\"Welcome to Wallstreet!\") \n                        while(true){\n                            StockApplication.stocks\n                        }\n            case 2 => userOptions\n            case 3 => println(\"You have exited the Application\")\n                        println(\"Enter any key to wake the machine back up\")\n                        var reboot = scala.io.StdIn.readLine\n            case _ => println(\"Enter a valid number\")\n                        options\n        }\n    }\n\n    def userOptions{\n        var userOptionSeq: Seq[String] = Seq(\"1: Switch User\", \"2: Update User\", \"3: Display Users\", \"4: Exit User Options\")\n        println(\"Please select a User Option\")\n        \n        for(x <- userOptionSeq){\n            println(x)\n        }\n\n        var selection = scala.io.StdIn.readInt\n\n        selection match{\n            case 1 => loginUser\n            case 2 => updateUser\n            case 3 => displayUsers\n            case 4 => exitUserOptions\n                        options\n            case _ => println(\"Enter a valid number\")\n                        userOptions\n        }\n    }\n\n    def loginUser{\n        println(\"Enter your username\")\n        var username = scala.io.StdIn.readLine\n\n        if(username == administrator){\n            println(\"Enter your password\")\n            var passwd = scala.io.StdIn.readLine\n                if(passwd == adminPass){\n                    println(\"Welcome \" + administrator)\n                }else if(failedAttempts == 2){\n                    println(\"3 Failed Inputs, please contact the nearest Data Engineer\")\n                    failedAttempts = 0\n                    loginUser\n                }else{\n                    println(\"Incorrect Password\")\n                    failedAttempts += 1\n                    loginUser\n                }\n        }else if(username == user1){\n            println(\"Enter your password\")\n            var passwd = scala.io.StdIn.readLine\n                if(passwd == user1Pass){\n                    println(\"Welcome \" + user1)\n                }else if(failedAttempts == 2){\n                    println(\"3 Failed Inputs, please contact the nearest Data Engineer\")\n                    failedAttempts = 0\n                    loginUser\n                }else{\n                    println(\"Incorrect Password\")\n                    failedAttempts += 1\n                    loginUser\n                }\n        }else if(failedAttempts == 2){\n            println(\"3 Failed Inputs, please contact the nearest Data Engineer\")\n            failedAttempts = 0\n            loginUser\n        }else{\n            println(\"Enter a valid username\")\n            failedAttempts += 1\n            loginUser\n        }\n    }\n\n    def updateUser{\n        var updateOptionSeq: Seq[String] = Seq(\"1: Update Username\", \"2: Update Password\")\n        println(\"Select an option\")\n\n        for(x <- updateOptionSeq){\n            println(x)\n        }\n\n        var selection = scala.io.StdIn.readInt\n\n        selection match{\n            case 1 => println(\"Enter your username\")\n                        var username = scala.io.StdIn.readLine\n\n                        if(username == administrator){\n                            println(\"Enter your password\")\n                            var passwd = scala.io.StdIn.readLine\n                                if(passwd == adminPass){\n                                    println(\"So, \" + administrator + \", you would like to update your username?\")\n                                    println(\"Please enter a new username\")\n                                    administrator = scala.io.StdIn.readLine\n                                    println(\"Your username has been updated to: \" + administrator)\n                                    println(\"Returning to options\")\n                                    userOptions\n                                }else if(failedAttempts == 2){\n                                    println(\"3 Failed Inputs, returning to User Options\")\n                                    failedAttempts = 0\n                                    userOptions\n                                }else{\n                                    println(\"Enter a valid username\")\n                                    failedAttempts += 1\n                                    updateUser\n                                }\n                        }else if(username == user1){\n                            println(\"Enter your password\")\n                            var passwd = scala.io.StdIn.readLine\n                                if(passwd == user1Pass){\n                                    println(\"So, \" + user1 + \", you would like to update your username?\")\n                                    println(\"Please enter a new username\")\n                                    user1 = scala.io.StdIn.readLine\n                                    println(\"Your username has been updated to: \" + user1)\n                                    println(\"Returning to options\")\n                                    userOptions\n                                }else if(failedAttempts == 2){\n                                    println(\"3 Failed Inputs, returning to User Options\")\n                                    failedAttempts = 0\n                                    userOptions\n                                }else{\n                                    println(\"Enter a valid username\")\n                                    failedAttempts += 1\n                                    updateUser\n                                }\n                        }else if(failedAttempts == 2){\n                            println(\"3 Failed Inputs, returning to User Options\")\n                            failedAttempts = 0\n                            userOptions\n                        }else{\n                            println(\"Enter a valid username\")\n                            failedAttempts += 1\n                            updateUser\n                        }\n\n            case 2 => println(\"Enter your username\")\n                        var username = scala.io.StdIn.readLine\n\n                        if(username == administrator){\n                            println(\"Enter your password\")\n                            var passwd = scala.io.StdIn.readLine\n                                if(passwd == adminPass){\n                                    println(\"So, \" + administrator + \", you would like to update your password?\")\n                                    println(\"Please enter a new password\")\n                                    adminPass = scala.io.StdIn.readLine\n                                    println(\"Your password has been updated to: \" + adminPass)\n                                    println(\"Returning to User Options\")\n                                    userOptions\n                                }else if(failedAttempts == 2){\n                                    println(\"3 Failed Inputs, returning to User Options\")\n                                    failedAttempts = 0\n                                    userOptions\n                                }else{\n                                    println(\"Enter a valid username\")\n                                    failedAttempts += 1\n                                    updateUser\n                                }\n                        }else if(username == user1){\n                            println(\"Enter your password\")\n                            var passwd = scala.io.StdIn.readLine\n                                if(passwd == user1Pass){\n                                    println(\"So, \" + user1 + \", you would like to update your password?\")\n                                    println(\"Please enter a new password\")\n                                    user1Pass = scala.io.StdIn.readLine\n                                    println(\"Your password has been updated to: \" + user1Pass)\n                                    println(\"Returning to User Options\")\n                                    userOptions\n                                }else if(failedAttempts == 2){\n                                    println(\"3 Failed Inputs, returning to User Options\")\n                                    failedAttempts = 0\n                                    userOptions\n                                }else{\n                                    println(\"Enter a valid username\")\n                                    failedAttempts += 1\n                                    updateUser\n                                }\n                        }else if(failedAttempts == 2){\n                            println(\"3 Failed Inputs, returning to User Options\")\n                            failedAttempts = 0\n                            userOptions\n                        }else{\n                            println(\"Enter a valid username\")\n                            failedAttempts += 1\n                            updateUser\n                        }\n\n            case _ => println(\"Enter a valid number\")\n                        userOptions\n        }\n    }\n\n    def displayUsers{\n        println(\"Here are the Users of this Application:\")\n        println(administrator)\n        println(user1)\n        userOptions\n    }\n\n    def exitUserOptions{\n        println(\"You have exited User Options\")\n    }\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0manalysis location (C:\Users\18284\Desktop\Training Program\Week 4\hiveproject1\target\scala-2.11\zinc\inc_compile_2.11.zip,true)[0m
[0m[[0m[32msuccess[0m] [0m[0mTotal time: 0 s, completed Oct 30, 2021, 7:14:24 PM[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Done event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(shell, None, None)[0m
[0m[[0m[0mdebug[0m] [0m[0mForcing garbage collection...[0m
