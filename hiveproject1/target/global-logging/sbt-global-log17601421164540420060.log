[0m[[0m[0mdebug[0m] [0m[0m> Exec(collectAnalyses, None, Some(CommandSource(network-1)))[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Processing event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Compile / collectAnalyses[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: initialized: JsonRpcNotificationMessage(2.0, initialized, {})[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: bloop.integrations.sbt.Offloader$$anon$1@57b130f6, check cycles: false, forcegc: true[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/18284/Desktop/Training%20Program/RepositoryOne/hiveproject1/src/main/scala/example/LoginScreen.scala","languageId":"scala","version":1,"text":"package example\n\nimport scala.io.Source\n\nobject LoginScreen {\n    var administrator = \"Admin\"\n    var adminPass = \"boss\"\n    var user1 = \"Matthew\"\n    var user1Pass = \"enter\"\n    var failedAttempts = 0\n    var currentUser = \"\"\n\n    def options{\n        var optionSeq: List[String] = List(\"1: Alpha Vantage API Application\", \"2: User Options\", \"3: Exit Application\")\n        println(\"Please select an option\")\n        \n        for(x <- optionSeq){\n            println(x)\n        }\n\n        var selection = scala.io.StdIn.readInt\n\n        selection match{\n            case 1 => println(\"Welcome to the STREET!\") \n                        while(true){\n                            StockApplication.stocks\n                        }\n            case 2 => userOptions\n            case 3 => println(\"You have exited the Application\")\n                        println(\"Enter any key to wake the machine back up\")\n                        var reboot = scala.io.StdIn.readLine\n            case _ => println(\"Enter a valid number\")\n                        options\n        }\n    }\n\n    def userOptions{\n        var userOptionSeq: Seq[String] = Seq(\"1: Switch User\", \"2: Update User\", \"3: Display Users\", \"4: Display Current User\", \"5: Exit User Options\")\n        println(\"Please select a User Option\")\n        \n        for(x <- userOptionSeq){\n            println(x)\n        }\n\n        var selection = scala.io.StdIn.readInt\n\n        selection match{\n            case 1 => loginUser\n            case 2 => updateUser\n            case 3 => displayUsers\n            case 4 => displayCurrentUser\n            case 5 => exitUserOptions\n                        options\n            case _ => println(\"Enter a valid number\")\n                        userOptions\n        }\n    }\n\n    def loginUser{\n        println(\"Enter your username\")\n        var username = scala.io.StdIn.readLine\n\n        if(username == administrator){\n            println(\"Enter your password\")\n            var passwd = scala.io.StdIn.readLine\n                if(passwd == adminPass){\n                    println(\"Welcome \" + administrator)\n                    currentUser = administrator\n                }else if(failedAttempts == 2){\n                    println(\"3 Failed Inputs, please contact the nearest Data Engineer\")\n                    failedAttempts = 0\n                    loginUser\n                }else{\n                    println(\"Incorrect Password\")\n                    failedAttempts += 1\n                    loginUser\n                }\n        }else if(username == user1){\n            println(\"Enter your password\")\n            var passwd = scala.io.StdIn.readLine\n                if(passwd == user1Pass){\n                    println(\"Welcome \" + user1)\n                    currentUser = user1\n                }else if(failedAttempts == 2){\n                    println(\"3 Failed Inputs, please contact the nearest Data Engineer\")\n                    failedAttempts = 0\n                    loginUser\n                }else{\n                    println(\"Incorrect Password\")\n                    failedAttempts += 1\n                    loginUser\n                }\n        }else if(failedAttempts == 2){\n            println(\"3 Failed Inputs, please contact the nearest Data Engineer\")\n            failedAttempts = 0\n            loginUser\n        }else{\n            println(\"Enter a valid username\")\n            failedAttempts += 1\n            loginUser\n        }\n    }\n\n    def updateUser{\n        var updateOptionSeq: Seq[String] = Seq(\"1: Update Username\", \"2: Update Password\")\n        println(\"Select an option\")\n\n        for(x <- updateOptionSeq){\n            println(x)\n        }\n\n        var selection = scala.io.StdIn.readInt\n\n        selection match{\n            case 1 => println(\"Enter your username\")\n                        var username = scala.io.StdIn.readLine\n\n                        if(username == administrator){\n                            println(\"Enter your password\")\n                            var passwd = scala.io.StdIn.readLine\n                                if(passwd == adminPass){\n                                    println(\"So, \" + administrator + \", you would like to update your username?\")\n                                    println(\"Please enter a new username\")\n                                    administrator = scala.io.StdIn.readLine\n                                    println(\"Your username has been updated to: \" + administrator)\n                                    println(\"Returning to options\")\n                                    userOptions\n                                }else if(failedAttempts == 2){\n                                    println(\"3 Failed Inputs, returning to User Options\")\n                                    failedAttempts = 0\n                                    userOptions\n                                }else{\n                                    println(\"Enter a valid username\")\n                                    failedAttempts += 1\n                                    updateUser\n                                }\n                        }else if(username == user1){\n                            println(\"Enter your password\")\n                            var passwd = scala.io.StdIn.readLine\n                                if(passwd == user1Pass){\n                                    println(\"So, \" + user1 + \", you would like to update your username?\")\n                                    println(\"Please enter a new username\")\n                                    user1 = scala.io.StdIn.readLine\n                                    println(\"Your username has been updated to: \" + user1)\n                                    println(\"Returning to options\")\n                                    userOptions\n                                }else if(failedAttempts == 2){\n                                    println(\"3 Failed Inputs, returning to User Options\")\n                                    failedAttempts = 0\n                                    userOptions\n                                }else{\n                                    println(\"Enter a valid username\")\n                                    failedAttempts += 1\n                                    updateUser\n                                }\n                        }else if(failedAttempts == 2){\n                            println(\"3 Failed Inputs, returning to User Options\")\n                            failedAttempts = 0\n                            userOptions\n                        }else{\n                            println(\"Enter a valid username\")\n                            failedAttempts += 1\n                            updateUser\n                        }\n\n            case 2 => println(\"Enter your username\")\n                        var username = scala.io.StdIn.readLine\n\n                        if(username == administrator){\n                            println(\"Enter your password\")\n                            var passwd = scala.io.StdIn.readLine\n                                if(passwd == adminPass){\n                                    println(\"So, \" + administrator + \", you would like to update your password?\")\n                                    println(\"Please enter a new password\")\n                                    adminPass = scala.io.StdIn.readLine\n                                    println(\"Your password has been updated to: \" + adminPass)\n                                    println(\"Returning to User Options\")\n                                    userOptions\n                                }else if(failedAttempts == 2){\n                                    println(\"3 Failed Inputs, returning to User Options\")\n                                    failedAttempts = 0\n                                    userOptions\n                                }else{\n                                    println(\"Enter a valid username\")\n                                    failedAttempts += 1\n                                    updateUser\n                                }\n                        }else if(username == user1){\n                            println(\"Enter your password\")\n                            var passwd = scala.io.StdIn.readLine\n                                if(passwd == user1Pass){\n                                    println(\"So, \" + user1 + \", you would like to update your password?\")\n                                    println(\"Please enter a new password\")\n                                    user1Pass = scala.io.StdIn.readLine\n                                    println(\"Your password has been updated to: \" + user1Pass)\n                                    println(\"Returning to User Options\")\n                                    userOptions\n                                }else if(failedAttempts == 2){\n                                    println(\"3 Failed Inputs, returning to User Options\")\n                                    failedAttempts = 0\n                                    userOptions\n                                }else{\n                                    println(\"Enter a valid username\")\n                                    failedAttempts += 1\n                                    updateUser\n                                }\n                        }else if(failedAttempts == 2){\n                            println(\"3 Failed Inputs, returning to User Options\")\n                            failedAttempts = 0\n                            userOptions\n                        }else{\n                            println(\"Enter a valid username\")\n                            failedAttempts += 1\n                            updateUser\n                        }\n\n            case _ => println(\"Enter a valid number\")\n                        userOptions\n        }\n    }\n\n    def displayUsers{\n        println(\"Users of this Application:\")\n        println(administrator)\n        println(user1)\n        userOptions\n    }\n\n    def displayCurrentUser{\n        println(currentUser + \" is currently logged in\")\n    }\n\n    def exitUserOptions{\n        println(\"You have exited User Options\")\n    }\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0manalysis location (C:\Users\18284\Desktop\Training Program\RepositoryOne\hiveproject1\target\scala-2.11\zinc\inc_compile_2.11.zip,true)[0m
[0m[[0m[32msuccess[0m] [0m[0mTotal time: 0 s, completed Nov 27, 2021, 12:27:55 PM[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Done event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(shell, None, None)[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didClose: JsonRpcNotificationMessage(2.0, textDocument/didClose, {"textDocument":{"uri":"file:///c%3A/Users/18284/Desktop/Training%20Program/RepositoryOne/hiveproject1/src/main/scala/example/LoginScreen.scala"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/18284/Desktop/Training%20Program/RepositoryOne/hiveproject1/src/main/scala/example/StockApplication.scala","languageId":"scala","version":1,"text":"package example\n\nimport scala.io.Source\nimport java.io.PrintWriter\nimport java.io.File\n\nimport scala.util.Try\nimport java.io.IOException\nimport java.sql.SQLException\nimport java.sql.Connection\nimport java.sql.ResultSet\nimport java.sql.Statement\nimport java.sql.DriverManager\n\nobject StockApplication {\n\n    def stocks(): Unit = {\n\n        var stockOptionSeq: Seq[String] = Seq(\"1: LOAD Stock Data from Alpha Vantage API to HDP\", \"2: LOAD/DROP API Data in Hive DataWarehouse\", \"3: Query API Data\", \"4: Return to Main Screen\")\n        println(\"Select an option\")\n\n        for(x <- stockOptionSeq){\n            println(x)\n        }\n\n        var selection = scala.io.StdIn.readInt\n\n        selection match{\n            case 1 => tickerSelection\n            case 2 => hiveLoad\n            case 3 => hiveQuery\n            case 4 => println(\"You have returned to the Main Screen\")\n                        LoginScreen.options\n            case _ => println(\"Enter a valid number\")\n                        stocks\n        }\n    }\n\n    // stock ticker variable\n    var symbol = \"\"\n\n    def tickerSelection {\n        println(\"Enter Stock Ticker\")\n        symbol = scala.io.StdIn.readLine\n        getApiData\n    }\n\n    // gets data from Alpha Vantage API url\n    // variables can be changed in the url to retrieve specific data\n\n    def getApiData {\n        val url = \"https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=\" + symbol + \"&datatype=csv&apikey=4TZZOJKGYN1WMDJ9\"\n        val result = scala.io.Source.fromURL(url).mkString\n        println(\"Retrieving Data from API Pipeline...\")\n\n        moveDataToHDP(result)\n        println(result)\n    }\n\n    // passes in result as parameter and writes the json data as a new file into specified HDP directory\n    \n    def moveDataToHDP(csv: String): Unit = {\n        val filePathHDP = \"/tmp/dataFolder/stockData.csv\"\n        val writer = new PrintWriter(new File(filePathHDP))\n        writer.write(csv)\n        writer.close()\n\n        println(\"File created in HDP Path: \" + filePathHDP)\n    }\n\n    def hiveLoad {\n        var connection: java.sql.Connection = null\n\n        try{\n        var driverName = \"org.apache.hive.jdbc.HiveDriver\"\n        val connectionString = \"jdbc:hive2://sandbox-hdp.hortonworks.com:10000/project1_database\"\n\n        Class.forName(driverName)\n        connection = DriverManager.getConnection(connectionString, \"\", \"\")\n        val statement = connection.createStatement()\n\n        var hiveCommand = \"\"\n        // statement.execute(hiveCommand)      <- this is for executing hive commands\n        \n        println(\"Enter 1 to create new Table\")\n        println(\"Enter 2 to drop a Table\")\n\n        val hiveSelection = scala.io.StdIn.readInt\n\n        hiveSelection match{\n            case 1 =>   println(\"Type in a name for the new table\")\n                        val newTable = scala.io.StdIn.readLine\n                        hiveCommand = \"CREATE TABLE \" + newTable + \"(time String, open String, high String, low String, close String, volume String) row format delimited fields terminated by ','\"\n                        statement.execute(hiveCommand)\n                        println(newTable + \" Table created\")\n\n                        println(\"LOAD DATA LOCAL INPATH '/tmp/dataFolder/stockData.csv' INTO TABLE \" + newTable)\n                        hiveCommand = \"LOAD DATA LOCAL INPATH '/tmp/dataFolder/stockData.csv' INTO TABLE \" + newTable\n                        statement.execute(hiveCommand)\n                        println(\"Data loaded into Table successfully\")\n\n            case 2 =>   println(\"Type in the name of the table you wish to drop\")\n                        val dropName = scala.io.StdIn.readLine\n                        hiveCommand = \"DROP TABLE \" + dropName\n                        statement.execute(hiveCommand)\n                        println(dropName + \" Table has been dropped from the database\")\n\n            case _ =>   println(\"Invalid: Returning to Selections\")\n        }\n\n        }catch {\n            case ex => {\n                ex.printStackTrace();\n                throw new Exception(s\"${ex.getMessage}\")\n            }\n        }finally {\n            try {\n                if (connection != null)\n                connection.close();\n            } catch {\n                case ex => {\n                ex.printStackTrace();\n                throw new Exception(s\"${ex.getMessage}\")\n                }\n            }\n        }\n    }\n\n    def hiveQuery {\n        var connection: java.sql.Connection = null\n\n        try{\n        var driverName = \"org.apache.hive.jdbc.HiveDriver\"\n        val connectionString = \"jdbc:hive2://sandbox-hdp.hortonworks.com:10000/project1_database\"\n\n        Class.forName(driverName)\n        connection = DriverManager.getConnection(connectionString, \"\", \"\")\n        val statement = connection.createStatement()\n\n        var hiveCommand = \"\"\n        // statement.execute(hiveCommand)      <- this is for executing hive commands\n        \n        var x = \"\"\n        // x variable for printing queries in scala\n\n        println(\"Current Tables in the Database: \")\n            hiveCommand = \"SHOW TABLES\"\n            var z = statement.executeQuery(hiveCommand)\n            while (z.next()){\n                println(z.getString(1))\n            }\n\n        println(\"Enter the ticker symbol of an existing Table\")\n        var tickerQuery = scala.io.StdIn.readLine\n        println(\"Select a Query\")\n        println(\"1: Show last 10 Trading Days of \" + tickerQuery)\n        println(\"2: Show Max Price of \" + tickerQuery + \" in last 6 months\")\n        println(\"3: Show Minimum Price of \" + tickerQuery + \" in last 6 months\")\n        println(\"4: Show Average Daily High of \" + tickerQuery + \" in last 6 months\")\n        println(\"5: Show Max Daily Volume Traded of \" + tickerQuery + \" in last 6 months\")\n        println(\"6: Show Minimum Daily Volume Traded of \" + tickerQuery + \" in last 6 months\")\n        println(\"7: Enter a custom Query\")\n\n        val querySelection = scala.io.StdIn.readInt\n\n        querySelection match{\n            case 1 =>   println(\"SELECT * FROM \" + tickerQuery + \" LIMIT 10\")\n                        hiveCommand = \"SELECT * FROM \" + tickerQuery + \" LIMIT 11\"\n                        var x = statement.executeQuery(hiveCommand)\n                        while (x.next()){\n                            println(x.getString(1) + \"  \" + x.getString(2) + \"  \" + x.getString(3) + \"  \" + x.getString(4) + \"  \" + x.getString(5) + \"  \" + x.getString(6))\n                        }\n\n            case 2 =>   println(\"SELECT MAX(CAST(high as int)) FROM \" + tickerQuery)\n                        println(\"Loading...\")\n                        hiveCommand = \"SELECT MAX(CAST(high as int)) FROM \" + tickerQuery\n                        var x = statement.executeQuery(hiveCommand)\n                        while (x.next()){\n                            println(\"High: \" + x.getString(1))\n                        }\n\n            case 3 =>   println(\"SELECT MIN(CAST(low as int)) FROM \" + tickerQuery)    \n                        println(\"Loading...\")\n                        hiveCommand = \"SELECT MIN(CAST(low as int)) FROM \" + tickerQuery\n                        var x = statement.executeQuery(hiveCommand)\n                        while (x.next()){\n                            println(\"Low: \" + x.getString(1))\n                        }\n\n            case 4 =>   println(\"SELECT AVG(CAST(high as int)) FROM \" + tickerQuery)    \n                        println(\"Loading...\")\n                        hiveCommand = \"SELECT AVG(CAST(high as int)) FROM \" + tickerQuery\n                        var x = statement.executeQuery(hiveCommand)\n                        while (x.next()){\n                            println(\"AVG High: \" + x.getString(1))\n                        }\n\n            case 5 =>   println(\"SELECT MAX(CAST(volume as int)) FROM \" + tickerQuery)\n                        println(\"Loading...\")\n                        hiveCommand = \"SELECT MAX(CAST(volume as int)) FROM \" + tickerQuery\n                        var x = statement.executeQuery(hiveCommand)\n                        while (x.next()){\n                            println(\"MAX Volume: \" + x.getString(1))\n                        }\n\n            case 6 =>   println(\"SELECT MIN(CAST(volume as int)) FROM \" + tickerQuery)\n                        println(\"Loading...\")\n                        hiveCommand = \"SELECT MIN(CAST(volume as int)) FROM \" + tickerQuery\n                        var x = statement.executeQuery(hiveCommand)\n                        while (x.next()){\n                            println(\"MIN Volume: \" + x.getString(1))\n                        }\n\n            case 7 =>   println(\"Type in a custom Query\") \n                        var c = scala.io.StdIn.readLine\n                        hiveCommand = s\"$c\"\n                        var x = statement.executeQuery(hiveCommand)\n\n                        println(\"How many fields would you like to display?\")\n                        println(\"Enter a number from 2 to 7\")\n\n                        var fieldNum = scala.io.StdIn.readInt\n\n                        fieldNum match{\n                            case 2 =>   while (x.next()){\n                                            println(x.getString(1) + \"  \" + x.getString(2))\n                                        }\n\n                            case 3 =>   while (x.next()){\n                                            println(x.getString(1) + \"  \" + x.getString(2) + \"  \" + x.getString(3))\n                                        }\n\n                            case 4 =>   while (x.next()){\n                                            println(x.getString(1) + \"  \" + x.getString(2) + \"  \" + x.getString(3) + \"  \" + x.getString(4))\n                                        }\n\n                            case 5 =>   while (x.next()){\n                                            println(x.getString(1) + \"  \" + x.getString(2) + \"  \" + x.getString(3) + \"  \" + x.getString(4) + \"  \" + x.getString(5))\n                                        }\n\n                            case 6 =>   while (x.next()){\n                                            println(x.getString(1) + \"  \" + x.getString(2) + \"  \" + x.getString(3) + \"  \" + x.getString(4) + \"  \" + x.getString(5) + \"  \" + x.getString(6))\n                                        }\n\n                            case 7 =>   while (x.next()){\n                                            println(x.getString(1) + \"  \" + x.getString(2) + \"  \" + x.getString(3) + \"  \" + x.getString(4) + \"  \" + x.getString(5) + \"  \" + x.getString(6) + \"  \" + x.getString(7))\n                                        }\n\n                            case _ =>   println(\"Invalid: Returning to Selections\")\n                        }\n\n            case _ => println(\"Invalid: Returning to Selections\")\n        }\n\n        }catch {\n            case ex => {\n                ex.printStackTrace();\n                throw new Exception(s\"${ex.getMessage}\")\n            }\n        }finally {\n            try {\n                if (connection != null)\n                connection.close();\n            } catch {\n                case ex => {\n                ex.printStackTrace();\n                throw new Exception(s\"${ex.getMessage}\")\n                }\n            }\n        }\n    }\n}\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mForcing garbage collection...[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled request received: shutdown: JsonRpcRequestMessage(2.0, ♨1, shutdown, null})[0m
