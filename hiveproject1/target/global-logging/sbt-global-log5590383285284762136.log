[0m[[0m[0mdebug[0m] [0m[0m> Exec(collectAnalyses, None, Some(CommandSource(network-1)))[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Processing event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Compile / collectAnalyses[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: bloop.integrations.sbt.Offloader$$anon$1@1ae9d0e4, check cycles: false, forcegc: true[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: initialized: JsonRpcNotificationMessage(2.0, initialized, {})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/18284/Desktop/Training%20Program/Week%204/hiveproject1/src/main/scala/example/GetUrlContent.scala","languageId":"scala","version":1,"text":"package example\n\nimport org.apache.http.HttpEntity\nimport org.apache.http.HttpResponse\nimport org.apache.http.client.ClientProtocolException\nimport org.apache.http.client.HttpClient\nimport org.apache.http.client.methods.HttpGet\nimport org.apache.http.impl.client.DefaultHttpClient\n\nobject GetUrlContent extends App {\n    simpleApi()\n    var data = getRestContent(\n        \"https://reqres.in/api/users\"\n    )\n    println(data)\n\n    data = getRestContent(\"https://gorest.co.in/public/v1/posts\")\n    println(data) \n\n    def simpleApi(): Unit = {\n        val url = \"http://api.hostip.info/get_json.php?ip=12.215.42.19\"\n        val result = scala.io.Source.fromURL(url).mkString\n        println(result)\n    }\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0manalysis location (C:\Users\18284\Desktop\Training Program\Week 4\hiveproject1\target\scala-2.11\zinc\inc_compile_2.11.zip,true)[0m
[0m[[0m[32msuccess[0m] [0m[0mTotal time: 0 s, completed Oct 29, 2021, 9:13:32 PM[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Done event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(shell, None, None)[0m
[0m[[0m[0mdebug[0m] [0m[0mForcing garbage collection...[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/18284/Desktop/Training%20Program/Week%204/hiveproject1/src/main/scala/example/StockApplication.scala","languageId":"scala","version":1,"text":"package example\n\nimport scala.io.Source\n\nimport scala.util.Try\nimport java.io.IOException\nimport java.sql.SQLException\nimport java.sql.Connection\nimport java.sql.ResultSet\nimport java.sql.Statement\nimport java.sql.DriverManager\n\nobject StockApplication {\n\n    def stocks(): Unit = {\n\n        var con: java.sql.Connection = null\n\n        try{\n        var driverName = \"org.apache.hive.jdbc.HiveDriver\"\n        val conStr = \"jdbc:hive2://sandbox-hdp.hortonworks.com:10000/project1_database\"\n\n        Class.forName(driverName)\n        con = DriverManager.getConnection(conStr, \"\", \"\")\n        val stmt = con.createStatement()\n        println(\"Connecting to the Street...\")\n        }catch {\n            case ex => {\n                ex.printStackTrace();\n                throw new Exception(s\"${ex.getMessage}\")\n            }\n        }finally {\n            try {\n                if (con != null)\n                con.close();\n            } catch {\n                case ex => {\n                ex.printStackTrace();\n                throw new Exception(s\"${ex.getMessage}\")\n                }\n            }\n        }\n\n        \n\n        var stockOptionSeq: Seq[String] = Seq(\"1: What's new?\", \"2: Hottest Stocks Today!\", \"3: Hottest Stocks of the Week!\", \"4: Return to Main Screen\")\n        println(\"Select an option\")\n\n        for(x <- stockOptionSeq){\n            println(x)\n        }\n\n        var selection = scala.io.StdIn.readInt\n\n        selection match{\n            case 1 => println(\"SPY HITS ALL TIME HIGH!!! Again...\")\n            case 2 => println(\"GME STILL THE MOST HYPED STOCK ON SUPERSTONK!!!\")\n            case 3 => println(\"GME ALSO THE HOTTEST OF THE WEEK, EVERY WEEK, Forever...\")\n            case 4 => println(\"You have returned to the Main Screen\")\n                        LoginScreen.options\n            case _ => println(\"Enter a valid number\")\n                        stocks\n        }\n    }\n}\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/18284/Desktop/Training%20Program/Week%204/hiveproject1/src/main/scala/example/HiveScala.scala","languageId":"scala","version":1,"text":"package example\n\nimport example.LoginScreen\nimport example.StockApplication\n\nobject HiveScala {\n    def main (args: Array[String]) {\n        println(\"Hello, welcome to Stock Market Application\")\n        println(\"Login to continue\")\n        LoginScreen.loginUser\n        \n        while(true){\n            LoginScreen.options\n        }\n    }\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/18284/Desktop/Training%20Program/Week%204/hiveproject1/build.sbt","languageId":"scala","version":1,"text":"import Dependencies._\r\n\r\nThisBuild / scalaVersion     := \"2.11.8\"\r\nThisBuild / version          := \"0.1.0-SNAPSHOT\"\r\nThisBuild / organization     := \"com.example\"\r\nThisBuild / organizationName := \"example\"\r\n\r\nlazy val root = (project in file(\".\"))\r\n  .settings(\r\n    name := \"HiveProject1\",\r\n    libraryDependencies += scalaTest % Test\r\n  )\r\n\r\n// Uncomment the following for publishing to Sonatype.\r\n// See https://www.scala-sbt.org/1.x/docs/Using-Sonatype.html for more detail.\r\n\r\n// ThisBuild / description := \"Some descripiton about your project.\"\r\n// ThisBuild / licenses    := List(\"Apache 2\" -> new URL(\"http://www.apache.org/licenses/LICENSE-2.0.txt\"))\r\n// ThisBuild / homepage    := Some(url(\"https://github.com/example/project\"))\r\n// ThisBuild / scmInfo := Some(\r\n//   ScmInfo(\r\n//     url(\"https://github.com/your-account/your-project\"),\r\n//     \"scm:git@github.com:your-account/your-project.git\"\r\n//   )\r\n// )\r\n// ThisBuild / developers := List(\r\n//   Developer(\r\n//     id    = \"Your identifier\",\r\n//     name  = \"Your Name\",\r\n//     email = \"your@email\",\r\n//     url   = url(\"http://your.url\")\r\n//   )\r\n// )\r\n// ThisBuild / pomIncludeRepository := { _ => false }\r\n// ThisBuild / publishTo := {\r\n//   val nexus = \"https://oss.sonatype.org/\"\r\n//   if (isSnapshot.value) Some(\"snapshots\" at nexus + \"content/repositories/snapshots\")\r\n//   else Some(\"releases\" at nexus + \"service/local/staging/deploy/maven2\")\r\n// }\r\n// ThisBuild / publishMavenStyle := true\r\n"}})[0m
