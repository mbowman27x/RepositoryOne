[0m[[0m[0mdebug[0m] [0m[0m> Exec(collectAnalyses, None, Some(CommandSource(network-1)))[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Processing event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Compile / collectAnalyses[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: bloop.integrations.sbt.Offloader$$anon$1@6a04d2a4, check cycles: false, forcegc: true[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: initialized: JsonRpcNotificationMessage(2.0, initialized, {})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/18284/Desktop/Training%20Program/Week%204/hiveproject1/src/main/scala/example/StockApplication.scala","languageId":"scala","version":1,"text":"package example\n\nimport scala.io.Source\nimport java.io.PrintWriter\nimport java.io.File\n\nimport scala.util.Try\nimport java.io.IOException\nimport java.sql.SQLException\nimport java.sql.Connection\nimport java.sql.ResultSet\nimport java.sql.Statement\nimport java.sql.DriverManager\n\nobject StockApplication {\n\n    def stocks(): Unit = {\n\n        var stockOptionSeq: Seq[String] = Seq(\"1: LOAD Stock Data from Alpha Vantage API to HDP\", \"2: LOAD API Data into Hive\", \"3: Query API Data\", \"4: Return to Main Screen\")\n        println(\"Select an option\")\n\n        for(x <- stockOptionSeq){\n            println(x)\n        }\n\n        var selection = scala.io.StdIn.readInt\n\n        selection match{\n            case 1 => tickerSelection\n            case 2 => hiveLoad\n            case 3 => hiveQuery\n            case 4 => println(\"You have returned to the Main Screen\")\n                        LoginScreen.options\n            case _ => println(\"Enter a valid number\")\n                        stocks\n        }\n    }\n\n    // stock ticker variable\n    var symbol = \"\"\n\n    def tickerSelection {\n        println(\"Enter Stock Ticker\")\n        symbol = scala.io.StdIn.readLine\n        getApiData\n    }\n\n    // gets data from Alpha Vantage API url\n    // variables can be changed in the url to retrieve specific data\n\n    def getApiData {\n        val url = \"https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=\" + symbol + \"&datatype=csv&apikey=4TZZOJKGYN1WMDJ9\"\n        val result = scala.io.Source.fromURL(url).mkString\n        println(\"Retrieving Data from API Pipeline...\")\n\n        moveDataToHDP(result)\n        println(result)\n    }\n\n    // passes in result as parameter and writes the json data as a new file into specified HDP directory\n    \n    def moveDataToHDP(csv: String): Unit = {\n        val filePathHDP = \"/tmp/dataFolder/stockData.csv\"\n        val writer = new PrintWriter(new File(filePathHDP))\n        writer.write(csv)\n        writer.close()\n\n        println(\"File created in HDP Path: \" + filePathHDP)\n    }\n\n    def hiveLoad {\n        var connection: java.sql.Connection = null\n\n        try{\n        var driverName = \"org.apache.hive.jdbc.HiveDriver\"\n        val connectionString = \"jdbc:hive2://sandbox-hdp.hortonworks.com:10000/project1_database\"\n\n        Class.forName(driverName)\n        connection = DriverManager.getConnection(connectionString, \"\", \"\")\n        val statement = connection.createStatement()\n\n        var hiveCommand = \"\"\n        // statement.execute(hiveCommand)      <- this is for executing hive commands\n        \n        println(\"Enter 1 to create Table\")\n\n        val hiveSelection = scala.io.StdIn.readInt\n\n        hiveSelection match{\n            case 1 =>   println(\"Type in a name for the new table\")\n                        val newTable = scala.io.StdIn.readLine\n                        hiveCommand = \"CREATE TABLE \" + newTable + \"(time String, open String, high String, low String, close String, volume String) row format delimited fields terminated by ','\"\n                        statement.execute(hiveCommand)\n                        println(newTable + \" Table created\")\n\n                        println(\"LOAD DATA LOCAL INPATH '/tmp/dataFolder/stockData.csv' INTO TABLE \" + newTable)\n                        hiveCommand = \"LOAD DATA LOCAL INPATH '/tmp/dataFolder/stockData.csv' INTO TABLE \" + newTable\n                        statement.execute(hiveCommand)\n                        println(\"Data loaded into Table successfully\")\n\n            case _ =>   println(\"Invalid: Returning to Selections\")\n        }\n\n        }catch {\n            case ex => {\n                ex.printStackTrace();\n                throw new Exception(s\"${ex.getMessage}\")\n            }\n        }finally {\n            try {\n                if (connection != null)\n                connection.close();\n            } catch {\n                case ex => {\n                ex.printStackTrace();\n                throw new Exception(s\"${ex.getMessage}\")\n                }\n            }\n        }\n    }\n\n    def hiveQuery {\n        var connection: java.sql.Connection = null\n\n        try{\n        var driverName = \"org.apache.hive.jdbc.HiveDriver\"\n        val connectionString = \"jdbc:hive2://sandbox-hdp.hortonworks.com:10000/project1_database\"\n\n        Class.forName(driverName)\n        connection = DriverManager.getConnection(connectionString, \"\", \"\")\n        val statement = connection.createStatement()\n\n        var hiveCommand = \"\"\n        // statement.execute(hiveCommand)      <- this is for executing hive commands\n        \n        var x = \"\"\n        // x variable for printing queries in scala\n\n        println(\"Enter the ticker symbol of an existing Table\")\n        var tickerQuery = scala.io.StdIn.readLine\n        println(\"Select a Query\")\n        println(\"1: Look at most recent performance of \" + tickerQuery)\n        println(\"2: \")\n        println(\"3: \")\n        println(\"4: \")\n        println(\"5: \")\n        println(\"6: \")\n\n        val querySelection = scala.io.StdIn.readInt\n\n        querySelection match{\n            case 1 =>   println(\"SELECT * FROM \" + tickerQuery + \" LIMIT 10\")\n                        hiveCommand = \"SELECT * FROM \" + tickerQuery + \" LIMIT 10\"\n                        var x = statement.executeQuery(hiveCommand)\n                        while (x.next()){\n                            println(x.getString(1) + \"  \" + x.getString(3) + \"  \" + x.getString(4))\n                        }\n            case 2 => println(\"2: \") \n            case 3 => println(\"3: \")            \n            case 4 => println(\"4: \")\n            case _ => println(\"Invalid: Returning to Selections\")\n        }\n\n        }catch {\n            case ex => {\n                ex.printStackTrace();\n                throw new Exception(s\"${ex.getMessage}\")\n            }\n        }finally {\n            try {\n                if (connection != null)\n                connection.close();\n            } catch {\n                case ex => {\n                ex.printStackTrace();\n                throw new Exception(s\"${ex.getMessage}\")\n                }\n            }\n        }\n    }\n}\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0manalysis location (C:\Users\18284\Desktop\Training Program\Week 4\hiveproject1\target\scala-2.11\zinc\inc_compile_2.11.zip,true)[0m
[0m[[0m[32msuccess[0m] [0m[0mTotal time: 0 s, completed Nov 5, 2021, 4:03:46 PM[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Done event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(shell, None, None)[0m
[0m[[0m[0mdebug[0m] [0m[0mForcing garbage collection...[0m
